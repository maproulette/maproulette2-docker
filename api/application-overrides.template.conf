#
# IMPORTANT NOTE:
#     The main application configuration is located within the [maproulette-backend repository](https://github.com/maproulette/maproulette-backend/blob/dev/conf/application.conf).
#     Changes in the default configuration should be done in the maproulette-backend repository, and not within the below override content.
#     Please reference the above URL to see all configuration options.
#
include "application.conf"

db.default {
  url="jdbc:postgresql://mr-postgis:5432/mrdata"
  username="mrdbuser"
  password="mrdbpass"
  hikaricp {
    # The database connection pool size can be tweaked based on available system resources and needed throughput.
    # Increasing this value causes more parallel database transactions at the cost of more RAM, more CPU.
    # Note:
    #   - The pool size should be less than the total postgres connections. Postgres defaults to 100 connections and more powerful systems tend to allow many more.
    #     - https://www.postgresql.org/docs/current/runtime-config-connection.html
    #   - HikariCP defaults to 10.
    maximumPoolSize=10
  }
}
maproulette {
  #action.level=3
  #logo="/assets/images/companylogo.png"
  #limits.challenges=3
  #limits.activities=10
  #super.key=
  #super.accounts=
  proxy {
    port=80
    ssl=false
  }
  scheduler {
    osmMatcher.enabled=false
    updateLocations.interval="24 hours"
    challengesLeaderboard.interval="15 minutes"
  }
  #mapillary.clientId="CHANGE_ME"
  publicOrigin="http://maproulette.example.com"
  emailFrom="maproulette@example.com"
  # If starting with a fresh server, set boostrap=true
  #bootstrap=true
}
osm {
  consumerKey="CHANGE_ME"
  consumerSecret="CHANGE_ME"
  server="https://master.apis.dev.openstreetmap.org"
  ql.timeout=120
}
play {
  # By default Akka uses the CPU core count to determine the number of threads used
  # to service requests. There are endpoints that block due to the JDBC driver not
  # supporting async, and it is suggested to greatly increase the Akka thread count.
  # For more information see the documentation where it has an example of 300 threads:
  # https://www.playframework.com/documentation/2.3.7/ThreadPools#Knowing-when-you-are-blocking
  akka {
    actor {
      default-dispatcher = {
        fork-join-executor {
          parallelism-min = 100
          parallelism-max = 100
        }
      }
    }
  }
  http {
    parser.maxDiskBuffer=100M
    parser.maxMemoryBuffer=100M
    session.sameSite=null
    session.maxAge=7 days
  }
}
parsers.MultipartFormData.maxLength=100M
